import javax.crypto.*;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;

public class CipServer
{
    public static void main(String[] args) throws Exception
    {
        final int PORT = 7999;
        ServerSocket server = new ServerSocket(PORT);
        Socket socket = server.accept();

        // -Read the key from the file generated by the client.
        Key key = readKey();

        // -Use the key to decrypt the incoming message from socket s.
        byte [] messageRead = readMessage(socket);

        String messageEncrypted = new String (messageRead);

        System.out.println("The encrypted message: " + messageEncrypted);

        byte [] decryptedMessage = decryptMessage(messageRead, key);

        String decryptedFinal = new String (decryptedMessage);

        System.out.println("The final decrypted message: " + decryptedFinal);

    }

    private static Key readKey() throws IOException, ClassNotFoundException {
        ObjectInputStream in = new ObjectInputStream(new FileInputStream("KeyFile"));
        Key key = (Key)in.readObject();
        in.close();
        return key;
    }

    private static byte [] readMessage (Socket socket) throws IOException {
        DataInputStream dataIn = new DataInputStream(socket.getInputStream());
        int lengthOfMessage = dataIn.readInt();
        byte [] message = null;
        if (lengthOfMessage > 0){
            message = new byte[lengthOfMessage];
            dataIn.readFully(message, 0, lengthOfMessage);
        }
        return message;
    }

    private static byte [] decryptMessage (byte [] message, Key key) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
        Cipher decryptionCipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
        decryptionCipher.init(Cipher.DECRYPT_MODE, key);
        byte [] decryptedMessage = decryptionCipher.doFinal(message);
        return decryptedMessage;
    }
}
